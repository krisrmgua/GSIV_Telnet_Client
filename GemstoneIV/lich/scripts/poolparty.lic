# Box pool script
# 
#
# Requires Ruby 2.4.5+
# use ;version to verify
# 
#
# author: elanthia-online
#
# tags: locksmith, picker, pool, locksmith pool, picking, boxes, loot, locksmith, locksmithing, rogue
# version: 2.02
# Huge shoutout to steeltalon for the 2.0 rewrite!
#
#
# Original work done by Glaves, but now maintained via elanthia-online 
#
#
# **Change Log**
# 1.00 - intial release
# 1.01 - Added RR waste bin
# 1.02 - added Icemule (Boss) NPC
# 1.03 - Added plinite support
# 1.04 - Added very basic disk logic (you still need a box in your inventory to trigger the intial deposit, but it will check your disk while at the pool)
# 1.05 - Removed the need for Foreach, added better disk logic, fixed wastebins
# 1.06 - Added Solhaven NPC
# 1.07 - Fixed wastebin in Solhaven, added plucking for plinites
# 1.08 - Updated Plinite handling logic
# 1.09 - Should have the RT issue fixed - Thank you Lostranger
# 1.10 - Updated the disk logic - Reverted change to RT back to a dumber hard pause
# 1.11 - Added the ability to only run the looting portion of the script ;PoolParty loot
# 1.12 - Props to Licel - Added a help menu, you can now set your tip ;poolparty tip ## - LICEL!
# 1.13 - Fixed syntax with new Tip setting feature
# 1.14 - Added a check to make sure you have your lootsack set
# 1.15 - Added the ability to toggle waiting for a disk ;Poolparty skipdiskwait to toggle- Licel
# 1.16 - Fixed plinites being put in the wastebin - Thank you Sentral!
# 1.17 - Added Zul Logoth
# 1.18 - Added Canister to trashbins - Sped up looting a bit
# 1.19 - Fixed issue with the flipable coins
# 1.20 - Shout to Selfane - Added ability to toggle between percentage or flat tip - Selfane
# 1.21 - Added SETTINGS - Check your current settings ;poolparty settings
# 1.22 - Fixed a Typo!, oops.
# 1.23 - Chaged Vars to regex for case insensitive
# 1.24 - Will now open lootsack before running logic - Shout out to Gidion for the suggestion!
# 1.25 - Apparently using regex for the vars was bad.  i fixed it
# 1.26 - Had to move where/when the script opens your lootsack so it wasn't annoying while changing settings
# 1.27 - Added logic for items left in boxes before trashing
# 1.28 - fixed not defaulting to percentage based tip
# 1.29 - Fixed an issue with the flat/silver thing not working right - Selfane
# 1.30 - Ooops - But i fixed it
# 1.31 - Added a check for a full l ootsack
# 1.32 - Fixed wandering gnome npc issue on FWI - Shout to Lieo for catching the bug!
# 1.32 - Added check another check for loot still in boxes
# 1.33 - FIXED!!!!  The stupid shit with peoples disks/names matching inside the regex and then trying to use it as a wastebin
# 1.34 - Attempting to speed things up a bit
# 2.00 - Rewrite - Steel Talon - See Poolparty help - REQUIRES ABOVE RUBY 2.0 (Update your ruby people)
# 2.01 - Fixed the library not downloading/loading issue
#
# Use ;version to verify you are not running ruby 2.0 - You need 2.4+
# Seriouesly, if your rubsy is asking you to trust scripts its too old and this wont work.
# Update your ruby!!!!  There is an installer on the wiki
# Tell it to ONLY install the ruby 2.5.5 NOT the lich/simu files
# If you dont want to update ruby i suggest you not update poolparty
#
# If you find any bugs please report them to ???

if !Script.exists? "oleani-lib"
echo "** MISSING LIBRARY"
echo "** So, Hold up, wait a minute let me get that lib up in it"
echo "** Downloading Oleani-lib"
do_client ";repo download oleani-lib.lic"
wait_while {running?('repository')}
end

load 'scripts/oleani-lib.lic'

module Helper
  def self.check_silvers
    action = proc {|server_string|
      if server_string =~ /^\s*Name\:|^\s*Gender\:|^\s*Normal \(Bonus\)|^\s*Strength \(STR\)\:|^\s*Constitution \(CON\)\:|^\s*Dexterity \(DEX\)\:|^\s*Agility \(AGI\)\:|^\s*Discipline \(DIS\)\:|^\s*Aura \(AUR\)\:|^\s*Logic \(LOG\)\:|^\s*Intuition \(INT\)\:|^\s*Wisdom \(WIS\)\:|^\s*Influence \(INF\)\:/
        nil
      elsif server_string =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+[0-9]+/
        DownstreamHook.remove("poolparty_check_silvers")
        nil
      else
        server_string
      end
    }

    DownstreamHook.add("poolparty_check_silvers", action)
    silvers = 0
    silence_me unless undo_silence = silence_me
    clear
    echo "Checking info"
    put 'info'
    silence_me if undo_silence
    while (line = get)
      if line =~ /^\s*Mana\:\s+\-?[0-9]+\s+Silver\:\s+([0-9]+?)/
        silvers = $1.to_i
        echo "I HAVE #{silvers}"
        if silvers >= 1 and silvers < 10 
            silvers = 10000
        end
        break
      end
    end

    silvers
  end

  def self.withdraw(withdraw_amount)
    Script.run('go2', 'bank --disable-confirm')

    if XMLData.room_title == '[Pinefar, Depository]'
      if GameObj.npcs.any? {|npc| npc.noun == 'banker'}
        fput "ask banker for #{[withdraw_amount.to_i, 20].max} silvers"
        # The banker nods and says, "Alright, here ye go.  Ye understand I be takin' a little more than that from ye account in the 'Mule.  I don't works for free!"
        # The banker looks at you suspiciously and says, "Hmm, I don't think ye be havin' enough in ye account to cover that and my fee.  Ye tryin' to pull one over on me?"
      else
        if (icemule_bank = Room.list.find {|room| room.location == 'Icemule Trace' and room.tags.include?('bank')})
          Script.run('go2', icemule_bank.id.to_s)
          result = dothistimeout "withdraw #{withdraw_amount} silvers", 1, /debt collector/
          if result =~ /debt collector/
            fput "withdraw #{withdraw_amount} silvers"
          end
        else
          echo 'waiting for banker...'
          wait_until {GameObj.npcs.any? {|npc| npc.noun == 'banker'}}
          fput "ask banker for #{[withdraw_amount.to_i, 20].max} silvers"
        end
      end
    else
      result = dothistimeout "withdraw #{withdraw_amount} silvers", 1, /debt collector/
      if result =~ /debt collector/
        fput "withdraw #{withdraw_amount} silvers"
      end
    end
  end

  def self.check_for_disk

    disk = nil
    notified = false
    25.times {
      break if (disk = GameObj[/^.*#{Char.name} (?:disk|coffin)$/])
      sleep 0.2
      unless notified

        Utilities::send_formatted("  `Waiting on your disk to arrive`")
        notified = true
      end
    }

    disk
  end

  def self.deposit_silver(amount)
    Script.run('go2', 'bank --disable-confirm')
    if XMLData.room_title == '[Pinefar, Depository]'
      if GameObj.npcs.any? {|npc| npc.noun == 'banker'}
        fput "give banker #{amount} silvers"
      end
    else
      fput "deposit all"
    end
  end

  #Thank you foreach for all this lovely helpful code
  def self.find_sack(base = 'lootsack')
    # Adapted from ;loot
    sack = nil
    var = "#{base}"
    name = Vars[var].strip
    return sack unless name.length > 0
    if name =~ /^my\s+(.*)$/i
      name = $1
    end
    pattern = Regexp::escape(name)
    sack = nil
    [/\b#{pattern}$/i, /\b#{pattern.sub(' ', '.*')}$/i, /\b#{pattern.sub(' ', '.*')}/i].each {|pattern|
      sack = GameObj.inv.find {|obj| obj.name =~ pattern}
      break if sack
    }
    if sack
      sack
    else
      echo "warning: failed to find #{var} '#{name}'"
    end
  end

end

module LocksmithPool

  @boxes = []


  def self.test_pool_list
    npc = self.get_pool_master

    Utilities::send_formatted("`[Searching locksmith pool for boxes]`")

    action = proc {|server_string|
      if server_string =~ /^<prompt time=/
        DownstreamHook.remove("check_boxes")
        server_string
        nil
      elsif server_string =~ /^\s*?(\d+)\.\s*?(.*)/
        nil
      elsif server_string =~ /^\s*?It is ready to be/
        #Pop the last box and make note
        nil
      elsif server_string =~ /You haven't given us any boxes to be worked on\.|here's the list of boxes we have for you\.|<output|^\s*?\n*/
        nil
      else
        server_string
      end
    }

    DownstreamHook.add("check_boxes", action)
    $_SERVER_.puts "#{$cmd_prefix}ask #{npc} about list \n"

    boxes = []
    while (line = get)
      if line =~ /^\s*?(\d+)\.\s*(.*)/
        boxes << $2
      else
        line =~ /^<prompt time=/
        break
      end
    end

    boxes
  end

  #This is in the works to change
  def self.get_bin

    trash_list = ["barrel", "bin", "wastebasket", "trashcan", "bucket", "wooden crate", "iron barrel", "canister", "wastebin"]

    bin = trash_list.find {|x| Room.current.description.to_s =~ /#{x}/}

    bin = GameObj.loot.find {|t|

      t.name =~ /\bbarrel|\bbin|\bwastebasket|\btrashcan|\bbucket|\bcanister|\bwastebin/ && t.noun != "disk"

    } if bin.nil? || bin.empty?


    bin
  end

  #What is it you're trying to give?

  def self.deposit_box(box, tip)
    npc = self.get_pool_master

    raise "No npc found" if npc.nil?

    res = dothistimeout "give #{npc} #{tip}", 5, /^You want a locksmith to open|appear to be a box/

    unless res || res =~ /appear to be a box/
      raise "It appears you attempted to give a non-box to the Locksmith NPC.  Exiting out."
    end

    res = dothistimeout "give #{npc} #{tip}", 5, /You don't have that much on you|Your tip .*? has been recorded/i

    if res =~ /You don't have that much on you/
      raise "!! You do not appear to have enough silver on you !!"
    end

  end

  def self.get_pool_master
    GameObj.npcs.find {|npc|
      if Room.current.id != 17589
        npc.noun =~ /[Gg]nome|[Ww]oman|[Aa]ttendant|[M|m]erchant|[W|w]orker|[B|b]oss|[J|j]ahck|[D|d]warf/
      else
        npc.noun =~ /attendant/
      end
    }
  end

  def self.retrieve_box
    npc = self.get_pool_master
    raise "No npc found" if npc.nil?

    res = dothistimeout "ask #{npc} about return", 4, /We don't have any boxes ready for you|We don't have any boxes for you|You'll need an empty hand to do that.|Alright, here's your|You need to lighten your load first\./

    if res =~ /We don't have any boxes ready for you|We don't have any boxes for you/
      Utilities::send_formatted("!!No boxes in queue!!")
    elsif res =~ /You need to lighten your load first\./
      Utilities::send_formatted("!!You are too overloaded!!")
      Utilities::send_formatted("!!Please lighten your load (sell items, deposite silver, etc)!!")
      Utilities::send_formatted("When you are ready to proceeed rerun @@;poolparty@@")
      exit
    elsif res =~ /You'll need an empty hand to do that/
      raise "Your hands appear to be full.  Bailing out.  Please rerun after you check your lootsack etc."
    end

    GameObj.right_hand
  end


end





class PoolPartyConfig
  attr_reader :tip_type, :withdraw_amount, :start_room, :deposit_all, :skip_disk_wait, :tip_amount, :loot_command, :options


  def self.assertbool(value, msg)
    raise ArgumentError.new(msg) if value.downcase.strip !=~ /true|false/
  end

  def toggle_skip_disk_wait
    CharSettings['skip_disk_wait'] = !@skip_disk_wait

    @skip_disk_wait = CharSettings['skip_disk_wait']
  end

  def toggle_deposit_all
    CharSettings['deposit_all'] = !@deposit_all

    @deposit_all = CharSettings['deposit_all']
  end

  def toggle_loot_commamd
    CharSettings['loot_command'] = !@loot_command

    @loot_command = CharSettings['loot_command']
  end


  def initialize(start_room)
    @start_room = start_room
    @loot_command = CharSettings['loot_command'] ||= false
    @tip_amount = CharSettings['tip_amount'] ||= "25"
    @tip_type = CharSettings['tip_type'] ||= "percent"
    @skip_disk_wait = CharSettings['skip_disk_wait'] ||= false
    @withdraw_amount = CharSettings['withdraw_amount'] ||= 10000
    @deposit_all = CharSettings['deposit_all'] ||= false
  end


  def tip_amount=(amount)
    CharSettings['tip_amount'] = amount
    @tip_amount = CharSettings['tip_amount']
  end

  def withdraw_amount=(amount)
    CharSettings['withdraw_amount'] = amount
    @withdraw_amount = CharSettings['withdraw_amount']
  end

  def tip_type=(type)
    cleaned_type = type.downcase.strip

    if cleaned_type.downcase == "percent"
      CharSettings['tip_type'] = "percent"
    elsif cleaned_type.downcase == "silver"
      CharSettings['tip_type'] = "silver"
    else
      raise ArgumentError.new("Tip Type argument exception: Only PERCENT or SILVER is allowed")
    end
    @tip_type = CharSettings['tip_type']
  end

end

module PoolParty

  class NoBoxes < StandardError
  end

  @config = PoolPartyConfig.new(Room.current)

  def self.config
    @config
  end

  def self.version
    Gem::Version.new('0.0.5')
  end

  def self.have_boxes?
    has_box = GameObj.inv.any? {|c| c.contents.any? {|b| b.type == "box" || b.noun == "plinite"}}

    if !has_box && !@config.skip_disk_wait && (disk = Helper.check_for_disk)
      fput "look in #{Char.name} disk"
      has_box = GameObj[disk.id].contents.any? {|b| b.type == "box" || b.noun == "plinite"}
    end

    has_box
  end

  def self.clear_hands
    empty_hands

    raise "Unable to clear hands" unless GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?
  end

  def self.get_boxlist
    inventory = []

    if !@config.skip_disk_wait && (disk = Helper.check_for_disk)
      dothistimeout("look in ##{disk.id}", 15, /^I could not find what you were referring to|^In the|^There is nothing in/)

      arr = PoolParty.find_boxes_in(GameObj[disk.id])
      inventory.push(*arr) unless arr.nil?
    end

    GameObj.inv.each {|c|
      arr = PoolParty.find_boxes_in(c)
      inventory.push(*arr) unless arr.nil?
    }

    inventory
  end

  def self.get_box(b)
    fput "get ##{b.id}"

    starting = Process.clock_gettime(Process::CLOCK_MONOTONIC)


    wait_until {!GameObj.right_hand.id.nil? || (Process.clock_gettime(Process::CLOCK_MONOTONIC) - starting) < 5}

    dothistimeout("glance", 2, /^You glance down/)

    GameObj.right_hand
  end


  def self.find_boxes_in(location)
    location.contents.select {|b| b.type == "box" || b.noun == "plinite"}
  end

  def self.deposit
    self.validate_prereqs

    Utilities::send_formatted("** [Starting Deposit] **")

    raise NoBoxes unless PoolParty.have_boxes?

    PoolParty.clear_hands

    Helper.withdraw(@config.withdraw_amount) if Helper.check_silvers < @config.withdraw_amount

    current_Silvers = Helper.check_silvers

    if current_Silvers < (@config.withdraw_amount)
      Utilities::send_formatted("!! [NOTICE]  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [NOTICE] !!")
      Utilities::send_formatted("You do not have the minimum withdraw amount of `#{@withdraw_amount}` available.")
      Utilities::send_formatted("You do currently have `#{current_Silvers}` on you.")
      Utilities::send_formatted("If you wish to proceed anyways then type: @@;unpause poolparty@@")
      Utilities::send_formatted("Else type: @@;kill poolparty@@")
      pause_script
    end


    Script.run('go2', 'locksmith pool')

    boxes = self.get_boxlist

    tip = "#{@config.tip_amount} #{@config.tip_type == "percent" ? @config.tip_type: " "}"

    boxes.each do |b|
      #Always clear our hands!
      PoolParty.clear_hands

      res = self.get_box(b)

      raise "Unable to retrieve #{b}" if res.id.nil?

      LocksmithPool.deposit_box(b, tip)
    end


    self.queue_message("**You deposited #{boxes.length} into the system.**")
    self.flagforcleanup
  ensure

    Utilities::send_formatted("** [Ending Deposit] **")
  end


  def self.loot_box(box, lootsack)
    #You search through
    fput "get coins from ##{box.id}"
    waitrt?

    fput "loot ##{box.id}" if @config.loot_command

    res = dothistimeout "empty ##{box.id} in ##{lootsack.id}", 5, /but nothing will fit\.|but you can't quite get|but nothing comes out./

    if res =~ /but nothing will fit/

      Utilities::send_formatted("!!*SOMETHING WENT WRONG*!!")
      Utilities::send_formatted("**YOUR #{lootsack} IS FULL**")
      Utilities::send_formatted("**FIX IT AND ;unpause poolparty **")
      pause_script
      #Take us back to the locksmith pool if we moved during the pause
      Script.run('go2', 'locksmith pool')
    end

    waitrt?
  end

  #I'll do a second pass on this later
  def self.looting
    self.validate_prereqs

    silvers = Helper.check_silvers
    count = 0

    Utilities::send_formatted("** [Starting Loot] **")
    lootsack = Helper.find_sack

    fput "open ##{lootsack.id}"

    Script.run('go2', 'locksmith pool')

    bin = LocksmithPool.get_bin

    raise "Unable to find trashbin" if bin.nil? || bin.empty?

    while (box = LocksmithPool.retrieve_box)
      break if box.id.nil?

      count += 1
      #Seriously waging cores/plinites
      if box.noun == "core"
        fput "put ##{box.id} in my ##{lootsack.id}"
        next
      elsif box.type == "box" || box.type == "plinite"
        open_verb = box.type == "box" ? "open" : "pluck"
        stow_string = box.type == "box" ? "#{bin}" : "##{lootsack.id}"

        fput "#{open_verb} ##{box.id}"
        waitrt?

        self.loot_box(box, lootsack)

        #Need a plinite to figure out the messaging
        res = dothistimeout "put ##{box.id} in #{stow_string}", 5, /There appears to be an item or items attached to the container|you feel pleased with yourself at having cleaned up the surrounding area/

        if res =~ /"There appears to be an item or items attached to the container"/
          Utilities::send_formatted("!!*SOMETHING WENT WRONG*!!")
          Utilities::send_formatted("***CHECK THE BOX FOR LOOT***")
          pause_script
          #Take us back to the locksmith pool if we moved during the pause
          Script.run('go2', 'locksmith pool')
        end
      else
        raise "Something has gone horribly wrong.  We have exited."
      end

      PoolParty.clear_hands
    end

    Utilities::send_formatted("** [Ending Loot] **")
    self.queue_message("**You retrieved #{count} boxes from the system.**")

    self.flagforcleanup
  end


  def self.validate_prereqs

    raise "**lootsack has not been set, set it with** @@;vars set lootsack=container@@" if UserVars.lootsack.nil? or UserVars.lootsack.empty?

    lootsack = Helper.find_sack
    raise "**We could not find the specified loot sack.  Please validate #{UserVars.lootsack} is still valid**" if lootsack.nil? || lootsack.empty?
    fput "open ##{lootsack.id}"

  end


  @messages = []

  def self.queue_message(msg)
    @messages << msg
  end

  #Tired and just tossed this in
  @cleanup = false

  def self.flagforcleanup
    @cleanup = true
  end

  def self.cleanup()
    if @cleanup
      silvers = Helper.check_silvers
      Helper.deposit_silver(silvers) if silvers > 0 && @config.deposit_all
      Script.run('go2', @config.start_room.id.to_s) unless @start_room == Room.current
    end
  ensure
    Utilities::send_formatted(@messages.join("\n"))
  end
end


begin
  load 'scripts/oleani-lib.lic'
  Utilities::version
  raise "Update me" if Utilities::version < Gem::Version.new('0.0.5')
rescue
  do_client(";repository download oleani-lib.lic")
  wait_while {running?('repository')}
  load 'scripts/oleani-lib.lic'
end

optsx = Utilities::Slop.new strict: true do

  banner "**PoolParty:[Version:#{PoolParty.version}]** **Usage:** `;poolparty` [options] command"

  on 'skip-disk-wait', "Toggle skip disk checking,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.skip_disk_wait.to_s.upcase}`]" do |opt, args|
    PoolParty.config.toggle_skip_disk_wait

    Utilities::send_formatted("**You have chosen to not wait for a disk.**") if PoolParty.config.skip_disk_wait
    Utilities::send_formatted("**You have chosen to wait for a disk.**") unless PoolParty.config.skip_disk_wait
  end

  on 'deposit-all', "Toggle deposit all silver when done,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.deposit_all.to_s.upcase}`]" do |opt, args|

    PoolParty.config.toggle_deposit_all

    Utilities::send_formatted("**You have chosen to deposit all silvers when finished.**") if PoolParty.config.deposit_all
    Utilities::send_formatted("**You have chosen to** !!NOT!! **deposit all silvers when finished.**") unless PoolParty.config.deposit_all
  end

  on 'withdraw-amount=', "Set amount to withdraw before depositing boxes,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.withdraw_amount}`]", as: Integer do |opt, args|
    raise ArgumentError.new("Withdraw amount must be above 0") if opt <=0
    Utilities::send_formatted("**You will now withdraw #{opt} silvers.**")
    PoolParty.config.withdraw_amount = opt
  end

  on 'tip-amount=', "Set amount to tip,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.tip_amount}]`", as: Integer do |opt, args|
    raise ArgumentError.new("Tip must be above 0") if opt <=0
    Utilities::send_formatted("**Tip amount set to #{opt}**")
    PoolParty.config.tip_amount = opt
  end

  on 'tip-type=', "Set tip type - Can be either PERCENT or SILVER,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.tip_type.to_s.upcase}`]" do |opt, args|
    Utilities::send_formatted("**Tip type set to #{opt}**")
    PoolParty.config.tip_type = opt
  end

  run do |opts, args|

    bob = optsx.to_hash.delete_if { | key, value  |
      value.nil?
    }

    exit if bob.length > 0

    PoolParty.deposit
    PoolParty.looting
  end

  command 'loot' do
    description 'Grab boxes from the locksmith pool'

    run do
      PoolParty.looting
    end
  end

  command 'deposit' do
    description 'Deposits boxes into the pool only'

    run do
      PoolParty.deposit
    end
  end

  command 'help' do
    description 'Show this page'

    on 'toggle-skipdisk=', "Skip disk checking,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.skip_disk_wait.to_s.upcase}`]"

    run do |opts, args|
      Utilities::send_formatted(optsx.to_s)
    end
  end

end



begin
   optsx.parse(script.vars.drop(1))
rescue ArgumentError => e
  PoolParty::queue_message("!! #{e.message} !!")
  #e.backtrace.each { |line| echo line }
rescue PoolParty::NoBoxes
  PoolParty::queue_message("!! Looks like you have no boxes for us to work with !!")
  PoolParty::queue_message("!! If you know you have boxes then lich lagged.  Rerun poolparty !!")
rescue StandardError => e
  PoolParty::queue_message("!!*SOMETHING WENT WRONG*!!")
  PoolParty::queue_message("!! #{e.message} !!")
  #e.backtrace.each { |line| echo line }
ensure
  PoolParty.cleanup
end

