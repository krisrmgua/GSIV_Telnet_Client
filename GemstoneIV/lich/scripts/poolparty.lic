# Box pool script
#
#
# Requires Ruby 2.4.5+
# use ;version to verify
#
#
# author: elanthia-online
#
# tags: locksmith, picker, pool, locksmith pool, picking, boxes, loot, locksmith, locksmithing, rogue
# version: 2.06
# Huge shoutout to steeltalon for the 2.0 rewrite!
#
#
# Original work done by Glaves, but now maintained via elanthia-online
#
#
# **Change Log**
# 1.00 - intial release
# 1.01 - Added RR waste bin
# 1.02 - added Icemule (Boss) NPC
# 1.03 - Added plinite support
# 1.04 - Added very basic disk logic (you still need a box in your inventory to trigger the intial deposit, but it will check your disk while at the pool)
# 1.05 - Removed the need for Foreach, added better disk logic, fixed wastebins
# 1.06 - Added Solhaven NPC
# 1.07 - Fixed wastebin in Solhaven, added plucking for plinites
# 1.08 - Updated Plinite handling logic
# 1.09 - Should have the RT issue fixed - Thank you Lostranger
# 1.10 - Updated the disk logic - Reverted change to RT back to a dumber hard pause
# 1.11 - Added the ability to only run the looting portion of the script ;PoolParty loot
# 1.12 - Props to Licel - Added a help menu, you can now set your tip ;poolparty tip ## - LICEL!
# 1.13 - Fixed syntax with new Tip setting feature
# 1.14 - Added a check to make sure you have your lootsack set
# 1.15 - Added the ability to toggle waiting for a disk ;Poolparty skipdiskwait to toggle- Licel
# 1.16 - Fixed plinites being put in the wastebin - Thank you Sentral!
# 1.17 - Added Zul Logoth
# 1.18 - Added Canister to trashbins - Sped up looting a bit
# 1.19 - Fixed issue with the flipable coins
# 1.20 - Shout to Selfane - Added ability to toggle between percentage or flat tip - Selfane
# 1.21 - Added SETTINGS - Check your current settings ;poolparty settings
# 1.22 - Fixed a Typo!, oops.
# 1.23 - Chaged Vars to regex for case insensitive
# 1.24 - Will now open lootsack before running logic - Shout out to Gidion for the suggestion!
# 1.25 - Apparently using regex for the vars was bad.  i fixed it
# 1.26 - Had to move where/when the script opens your lootsack so it wasn't annoying while changing settings
# 1.27 - Added logic for items left in boxes before trashing
# 1.28 - fixed not defaulting to percentage based tip
# 1.29 - Fixed an issue with the flat/silver thing not working right - Selfane
# 1.30 - Ooops - But i fixed it
# 1.31 - Added a check for a full l ootsack
# 1.32 - Fixed wandering gnome npc issue on FWI - Shout to Lieo for catching the bug!
# 1.32 - Added check another check for loot still in boxes
# 1.33 - FIXED!!!!  The stupid shit with peoples disks/names matching inside the regex and then trying to use it as a wastebin
# 1.34 - Attempting to speed things up a bit
# 2.00 - Rewrite - Steel Talon - See Poolparty help - REQUIRES ABOVE RUBY 2.0 (Update your ruby people)
# 2.01 - Fixed the library not downloading/loading issue
# 2.02 - Moved to Elanthia Online
# 2.03 - Fixed commas in INFO
# 2.04 - Changed Helper module to Helper to not conflict with shared library
# 2.05 - Code cleanup.  Hand sanity check for boxes.
# 2.06 - Fixed issue with not waiting for disk during deposit
#
# Use ;version to verify you are not running ruby 2.0 - You need 2.4+
# Seriously, if your ruby is asking you to trust scripts its too old and this wont work.
# Update your ruby!!!!  There is an installer on the wiki
# Tell it to ONLY install the ruby 2.5.5 NOT the lich/simu files
# If you dont want to update ruby i suggest you not update poolparty
#
# If you find any bugs please report them to ???

begin
  raise "Oleani is missing" unless Script.exists? "oleani-lib.lic"
  load 'scripts/oleani-lib.lic'
  raise "Oleani version is out of date" if Utilities::version < Gem::Version.new('0.0.8')
rescue => error
  echo error.message
  echo "Downloading Oleani-lib.lic"
  do_client(";repository download oleani-lib.lic")
  wait_while {running?('repository')}
  retry if Script.exists? "oleani-lib.lic"
  echo "Some how a core script is missing.  Don't know what happened."
  exit
end

begin
  raise "Slop command processor is missing" unless Script.exists? "slop-lib.lic"
  load 'scripts/slop-lib.lic'
rescue => error
  echo error.message
  echo "Downloading Slop-lib.lic"
  do_client(";repository download slop-lib.lic")
  wait_while {running?('repository')}
  retry if Script.exists? "slop-lib.lic"
  echo "Some how a core script is missing.  Don't know what happened."
  exit
end

if defined?(GameObj.type_data)
  GameObj.load_data if GameObj.type_data.empty? or GameObj.type_data.nil?
  if GameObj.type_data.nil?
    wait_while {running?('repository')}
    start_script 'repository', ['download', 'gameobj-data.xml']
    wait_while {running?('repository')}
    GameObj.load_data
    exit if GameObj.type_data.nil?
  end
end

class LocksmithPool
  attr_accessor :count

  def initialize
    @count = 0
  end

  def trash_box(box)
    bin = get_bin
    res = dothistimeout "put ##{box.id} in #{bin}", 5, /There appears to be an item or items attached to the container|you feel pleased with yourself at having cleaned up the surrounding area/

    if res =~ /"There appears to be an item or items attached to the container"/
      error = []
      error << "!!*SOMETHING WENT WRONG*!!"
      error << "***CHECK THE BOX FOR LOOT***"
      raise error.join("\n")
    end
  end

  #This is in the works to change
  def get_bin

    trash_list = ["barrel", "bin", "wastebasket", "trashcan", "bucket", "wooden crate", "iron barrel", "canister", "wastebin"]

    bin = trash_list.find {|x| Room.current.description.to_s =~ /#{x}/}

    bin = GameObj.loot.find {|t|

      t.name =~ /\bbarrel|\bbin|\bwastebasket|\btrashcan|\bbucket|\bcanister|\bwastebin/ && t.noun != "disk"

    } if bin.nil? || bin.empty?

    raise "Unable to find trashbin" if bin.nil? || bin.empty?

    bin
  end

  def each
    while (box = retrieve_box)
      break unless box.is_valid?

      @count += 1

      yield box
    end
  end

  #What is it you're trying to give?

  def deposit_right_hand(tip)
    npc = self.get_pool_master

    raise "No npc found" if npc.nil?

    res = dothistimeout "give #{npc} #{tip}", 5, /^You want a locksmith to open|appear to be a box|we're already holding as many boxes for you as we can/

    case res
    when nil
      raise "Unable to deposit box.  Unknown reason"
    when /appear to be a box/
      raise "Attempted to deposit non-box.  Something has gone wrong."
    when /we're already holding as many boxes for you as we can/
      raise "Pool is full.  Please drain the pool and retry"
    else
      #No need
    end

    res = dothistimeout "give #{npc} #{tip}", 5, /You don't have that much on you|Your tip .*? has been recorded/i

    if res =~ /You don't have that much on you/
      raise "!! You do not appear to have enough silver on you !!"
    end

  end

  def get_pool_master
    GameObj.npcs.find {|npc|
      if Room.current.id != 17589
        npc.noun =~ /[Gg]nome|[Ww]oman|[Aa]ttendant|[M|m]erchant|[W|w]orker|[B|b]oss|[J|j]ahck|[D|d]warf/
      else
        npc.noun =~ /attendant/
      end
    }
  end

  def retrieve_box
    npc = get_pool_master

    raise "No npc found" if npc.nil?

    res = dothistimeout "ask #{npc} about return", 4, /We don't have any boxes ready for you|We don't have any boxes for you|You'll need an empty hand to do that.|Alright, here's your|You need to lighten your load first\./

    case res
    when nil
      raise "Danger Danger?!"
    when /We don't have any boxes ready for you|We don't have any boxes for you/
      raise "No boxes in queue."
    when /You need to lighten your load first\./
      Utilities::send_formatted("!!You are too overloaded!!")
      Utilities::send_formatted("!!Please lighten your load (sell items, deposite silver, etc)!!")
      Utilities::send_formatted("When you are ready to proceeed rerun @@;poolparty@@")
      exit
    when /You'll need an empty hand to do that/
      raise "Your hands appear to be full.  Bailing out.  Please rerun after you check your lootsack etc."
    else
      #Ignore
    end

    Helper::Box.new(GameObj.right_hand)
  end


end

class PoolPartyConfig
  attr_reader :tip_type, :withdraw_amount, :start_room, :deposit_all, :skip_disk_wait, :tip_amount, :loot_command, :options

  def self.assertbool(value, msg)
    raise ArgumentError.new(msg) if value.downcase.strip != ~/true|false/
  end

  def toggle_skip_disk_wait
    CharSettings['skip_disk_wait'] = !@skip_disk_wait

    @skip_disk_wait = CharSettings['skip_disk_wait']
  end

  def toggle_deposit_all
    CharSettings['deposit_all'] = !@deposit_all

    @deposit_all = CharSettings['deposit_all']
  end

  def toggle_loot_commamd
    CharSettings['loot_command'] = !@loot_command

    @loot_command = CharSettings['loot_command']
  end


  def initialize(start_room)
    @start_room = start_room
    @loot_command = CharSettings['loot_command'] ||= false
    @tip_amount = CharSettings['tip_amount'] ||= "25"
    @tip_type = CharSettings['tip_type'] ||= "percent"
    @skip_disk_wait = CharSettings['skip_disk_wait'] ||= false
    @withdraw_amount = CharSettings['withdraw_amount'] ||= 10000
    @deposit_all = CharSettings['deposit_all'] ||= false
  end


  def tip_amount=(amount)
    CharSettings['tip_amount'] = amount
    @tip_amount = CharSettings['tip_amount']
  end

  def withdraw_amount=(amount)
    CharSettings['withdraw_amount'] = amount
    @withdraw_amount = CharSettings['withdraw_amount']
  end

  def tip_type=(type)
    cleaned_type = type.downcase.strip.downcase

    if cleaned_type != "percent" and cleaned_type != "silver"
      raise ArgumentError.new("Tip Type argument exception: Only PERCENT or SILVER is allowed")
    end
    CharSettings['tip_type'] = type
    @tip_type = CharSettings['tip_type']
  end

end

module PoolParty

  class InventoryFull < StandardError
  end

  class NoBoxes < StandardError
  end

  @config = PoolPartyConfig.new(Room.current)

  def self.config
    @config
  end

  def self.version
    Gem::Version.new('2.0.6')
  end

  def self.find_boxes
    downstream = @script.want_downstream = false
    downstream_xml = @script.want_downstream_xml = true

    @script.want_downstream = false
    @script.want_downstream_xml = true

    @matcher = ItemMatcher.new

    @matcher.item_filter = proc {|item|
      item.type.split(',').find {|t| t =~ /box/} || item.noun == "plinite"
    }

    @matcher.ingest_inventory
    @matcher.ingest_from_name("#{Char.name} disk") if !@config.skip_disk_wait && Helper.check_for_disk

    @matcher.finalize

    @script.want_downstream = downstream
    @script.want_downstream_xml = downstream_xml
  end

  def self.have_boxes?
    self.find_boxes
    @matcher.total_items > 0 || GameObj.right_hand.type == "box" || GameObj.left_hand.type == "box"
  end

  def self.clear_hands
    empty_hands

    raise "Unable to clear hands" unless GameObj.right_hand.id.nil? && GameObj.left_hand.id.nil?
  end

  def self.get_box(b)
    fput "get ##{b.id}"

    starting = Process.clock_gettime(Process::CLOCK_MONOTONIC)

    wait_until {!GameObj.right_hand.id.nil? || (Process.clock_gettime(Process::CLOCK_MONOTONIC) - starting) < 5}

    dothistimeout("glance", 2, /^You glance down/)

    GameObj.right_hand
  end


  def self.find_boxes_in(location)
    location.contents.select {|b| b.type == "box" || b.noun == "plinite"}
  end

  def self.deposit(script)
    self.validate_prereqs

    @script = script

    pool = LocksmithPool.new

    Utilities::send_formatted("** [Starting Deposit] **")

    raise NoBoxes unless PoolParty.have_boxes?

    Helper.withdraw(@config.withdraw_amount) if Helper.check_silvers < @config.withdraw_amount

    current_silvers = Helper.check_silvers

    if current_silvers < (@config.withdraw_amount)
      Utilities::send_formatted("!! [NOTICE]  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  [NOTICE] !!")
      Utilities::send_formatted("You do not have the minimum withdraw amount of `#{@withdraw_amount}` available.")
      Utilities::send_formatted("You do currently have `#{current_silvers}` on you.")
      Utilities::send_formatted("If you wish to proceed anyways then type: @@;unpause poolparty@@")
      Utilities::send_formatted("Else type: @@;kill poolparty@@")
      pause_script
    end

    Script.run('go2', 'locksmith pool')

    Helper.check_for_disk unless @config.skip_disk_wait

    tip = "#{@config.tip_amount} #{@config.tip_type == "percent" ? @config.tip_type : " "}"

    if GameObj.right_hand.type == "box"
      pool.deposit_right_hand(tip)
    end

    if GameObj.left_hand.type == "box"
      fput "swap"
      pool.deposit_right_hand(tip)
    end

    PoolParty.clear_hands

    @matcher.container_contents.each {|container, boxes|
      boxes.each {|box|
        PoolParty.clear_hands

        res = self.get_box(box)

        raise "Unable to retrieve #{box}" if res.id.nil?

        pool.deposit_right_hand(tip)
      }
    }

    self.queue_message("**You deposited #{@matcher.total_items} into the system.**")
    self.flagforcleanup
  ensure

    Utilities::send_formatted("** [Ending Deposit] **")
  end

  #I'll do a second pass on this later
  def self.looting
    self.validate_prereqs

    Utilities::send_formatted("** [Starting Loot] **")

    lootsack = Helper::Container.new(Helper.find_sack)

    lootsack.open

    Script.run('go2', 'locksmith pool')

    pool = LocksmithPool.new
    pool.each do |box|
      begin
        if box.noun == "core"
          box.move_to(lootsack.id)
          next
        elsif box.type == "box" || box.type == "plinite"
          box.open

          box.loot_coins

          box.loot if @config.loot_command

          box.empty_into(lootsack)

          if box.type == "box"
            pool.trash_box(box)
          else
            box.move_to(lootsack)
          end
        else
          raise "Something has gone horribly wrong.  We have exited."
        end
      rescue => error
        Utilities::send_formatted(error.message)

        pause_script

        #Take us back to the locksmith pool if we moved during the pause
        Script.run('go2', 'locksmith pool')
      end

      PoolParty.clear_hands
    end

    Utilities::send_formatted("** [Ending Loot] **")
    self.queue_message("**You retrieved #{pool.count} boxes from the system.**")

    self.flagforcleanup
  end


  def self.validate_prereqs

    raise "**lootsack has not been set, set it with** @@;vars set lootsack=container@@" if UserVars.lootsack.nil? or UserVars.lootsack.empty?

    lootsack = Helper.find_sack
    raise "**We could not find the specified loot sack.  Please validate #{UserVars.lootsack} is still valid**" if lootsack.nil? || lootsack.empty?

    fput "open ##{lootsack.id}"

  end


  @messages = []

  def self.queue_message(msg)
    @messages << msg
  end

  #Tired and just tossed this in
  @cleanup = false

  def self.flagforcleanup
    @cleanup = true
  end

  def self.cleanup()
    if @cleanup
      silvers = Helper.check_silvers
      Helper.deposit_silver(silvers) if silvers > 0 && @config.deposit_all
      Script.run('go2', @config.start_room.id.to_s) unless @start_room == Room.current
    end
  ensure
    Utilities::send_formatted(@messages.join("\n"))
  end
end

optsx = Slop.new strict: true do

  banner "**PoolParty:[Version:#{PoolParty.version}]** **Usage:** `;poolparty` [options] command"

  on 'skip-disk-wait', "Toggle skip disk checking,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.skip_disk_wait.to_s.upcase}`]" do |opt, args|
    PoolParty.config.toggle_skip_disk_wait

    Utilities::send_formatted("**You have chosen to not wait for a disk.**") if PoolParty.config.skip_disk_wait
    Utilities::send_formatted("**You have chosen to wait for a disk.**") unless PoolParty.config.skip_disk_wait
  end

  on 'deposit-all', "Toggle deposit all silver when done,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.deposit_all.to_s.upcase}`]" do |opt, args|

    PoolParty.config.toggle_deposit_all

    Utilities::send_formatted("**You have chosen to deposit all silvers when finished.**") if PoolParty.config.deposit_all
    Utilities::send_formatted("**You have chosen to** !!NOT!! **deposit all silvers when finished.**") unless PoolParty.config.deposit_all
  end

  on 'withdraw-amount=', "Set amount to withdraw before depositing boxes,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.withdraw_amount}`]", as: Integer do |opt, args|
    raise ArgumentError.new("Withdraw amount must be above 0") if opt <= 0
    Utilities::send_formatted("**You will now withdraw #{opt} silvers.**")
    PoolParty.config.withdraw_amount = opt
  end

  on 'tip-amount=', "Set amount to tip,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.tip_amount}]`", as: Integer do |opt, args|
    raise ArgumentError.new("Tip must be above 0") if opt <= 0
    Utilities::send_formatted("**Tip amount set to #{opt}**")
    PoolParty.config.tip_amount = opt
  end

  on 'tip-type=', "Set tip type - Can be either PERCENT or SILVER,\n#{' ' * 34}**Currently:**[`#{PoolParty.config.tip_type.to_s.upcase}`]" do |opt, args|
    Utilities::send_formatted("**Tip type set to #{opt}**")
    PoolParty.config.tip_type = opt
  end

  run do |opts, args|

    bob = optsx.to_hash.delete_if {|key, value|
      value.nil?
    }

    exit if bob.length > 0

    PoolParty.deposit(script)
    PoolParty.looting
  end

  command 'loot' do
    description 'Grab boxes from the locksmith pool'

    run do
      PoolParty.looting
    end
  end

  command 'deposit' do
    description 'Deposits boxes into the pool only'

    run do
      PoolParty.deposit(script)
    end
  end

  command 'help' do
    description 'Show this page'

    run do
      Utilities::send_formatted(optsx.to_s)
    end
  end

end


begin
  optsx.parse(script.vars.drop(1))
rescue PoolParty::NoBoxes
  PoolParty::queue_message("!! Looks like you have no boxes for us to work with !!")
  PoolParty::queue_message("!! If you know you have boxes then lich lagged.  Rerun poolparty !!")
rescue ArgumentError, StandardError => e
  PoolParty::queue_message("!!*SOMETHING WENT WRONG*!!")
  PoolParty::queue_message("!! #{e.message} !!")
ensure
  PoolParty.cleanup
end
